<?php
/**
 * @file
 * This file contains all Drupal hooks for the module other than any
 * node hooks and block hooks. Those go in the [module name].chado_node.inc file
 * and [module_name].blocks.inc respectively
 *
 * @ingroup legume_qtl
 */

require_once('includes/legume_qtl.chado_node.inc');

/**
 * Implementation of hook_permissions()
 * 
 * Set the permission types that this module uses. Essentially we
 * want permissions that protect creation, editing and deleting of
 * chado data objects
 * @ingroup legume_qtl
 *
 */
function legume_qtl_permissions() {
   return array(
    'access legume_qtl content' => array(
      'title' => t('View QTLs'),
      'description' => t('Allow users to view qtl pages.'),
    ),
      'administer legume_qtl' => array(
      'title' => t('Administer QTLs'),
      'description' => t('Allow module administration.'),
    )
  );
}


/**
 * Implements hook_menu().
 * Menu items are automatically added for the new node types created
 * by this module to the 'Create Content' Navigation menu item.  This function
 * adds more menu items needed for this module.
 *
 * @ingroup legume_qtl
 */
function legume_qtl_menu() {
  $items = array();

  // administration landing page. currently has no content but is
  // apparently required for the Sync and Help links to work.
  $items['admin/tripal/extension/legume_qtl'] = array(
    'title' => 'QTLs',
    'description' => 'qtls administration',
    'page callback' => 'legume_qtl_admin_listing',
    'access arguments' => array('administer legume_qtl'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  // help menu 
  $items['admin/tripal/extension/legume_qtl/help'] = array(
    'title' => 'Help',
    'description' => 'Basic description of legume_qtl module functionality',
    'page callback' => 'theme',
    'page arguments' => array('legume_qtl_help'),
    'access arguments' => array('administer legume_qtl'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10
  );

  // configuration menu item
  $items['admin/tripal/extension/legume_qtl/configuration'] = array(
    'title' => 'Settings',
    'description' => 'Configure the legume_qtl module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('legume_qtl_admin'),
    'access arguments' => array('administer legume_qtl'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );

  return $items;
}


/**
 * Implements hook_views_api()
 * Purpose: Essentially this hook tells drupal that there is views support for
 *  for this module which then includes tripal_db.views.inc where all the
 *  views integration code is
 *
 * @ingroup legume_qtl
 */
function legume_qtl_views_api() {
  return array(
    'api' => 3.0,
  );
}


/**
 *  Implements hook_theme().
 *
 * We need to let drupal know about our theme functions and their arguments.
 * We create theme functions to allow users of the module to customize the
 * look and feel of the output generated in this module
 *
 * @ingroup legume_qtl
 */
function legume_qtl_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'legume_qtl');

  $themes = array(        
    'tripal_feature_QTL_base' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_QTL_base',
      'path' => "$path/theme/templates"
    ),
    'tripal_feature_QTL_experiment' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_QTL_experiment',
      'path' => "$path/theme/templates"
    ),
    'tripal_feature_Map_Pos' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_Map_Pos',
      'path' => "$path/theme/templates"
    ),
    'tripal_feature_QTL_measurements' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_QTL_measurements',
      'path' => "$path/theme/templates"
    ),
    'tripal_feature_QTL_trait' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_QTL_trait',
      'path' => "$path/theme/templates"
    ),
  );

  return $themes;
}//legume_qtl_theme


/**
  * hook_form_alter
  *
  * Alter form before displaying
  */
function legume_qtl_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && strstr($form['#id'], 'QTL')) {
    // Set validate and submit callbacks
    $form['#validate'][] = 'legume_qtl_form_validate';
    
    // Add option for expanded/narrow searching
    $desc = 'if checked, only traits containing the requested text will be returned';
    $form['narrow'] = array(
      '#type'    => 'checkbox',
      '#title'   => t("Use narrow search ($desc)"),
    );
    
    // Change default value for submit button
    $form['submit']['#value'] = 'Search';
  }
}//legume_qtl_form_alter


/**
  * Form validator for search form. 
  * Use this to trim whitespace from text fields.
  */
function legume_qtl_form_validate($form, &$form_state) {
  //trim whitespace from all text fields;
  if (isset($form_state['values']['expt_pub_symbol']))
    $form_state['values']['expt_pub_symbol'] = trim($form_state['values']['expt_pub_symbol']);
  if (isset($form_state['values']['qtl_name']))
    $form_state['values']['qtl_name']      = trim($form_state['values']['qtl_name']);
}//legume_qtl_form_validate


/**
  * hook_pre_render()
  *   Called just before result table is rendered.
  */
function legume_qtl_views_pre_render($view) {
  if (strstr($view->name, 'QTL')) {  // Report QTL found before table
    $view->attachment_before = "<p><b>Found " . $view->query->pager->get_total_items() . " QTL</b></p>";
  
    // Display similar (sibling) traits below table
    if (isset($_SESSION['related_searches'])) {
      $simliar_traits = unserialize($_SESSION['related_searches']);
      unset($_SESSION['related_searches']);
      $view->attachment_after = "<p><b>Related traits: " . implode(', ', $simliar_traits) . "</b></p>";
   }
  }
}//legume_qtl_views_pre_render


/** hook_query_alter()
  * Alter contents of query array before query is executed
  */
function legume_qtl_views_query_alter($view, $query) {
  // If narrow search selected, don't alter query
  if (isset($view->exposed_raw_input['narrow']) 
      && $view->exposed_raw_input['narrow'] == 1) {
    // Don't check ontologies for matches
    return;
  }
  
  // Get term to search for, if any
  if (isset($view->exposed_raw_input['qtl_name'])) {
    $term = $view->exposed_raw_input['qtl_name'];
  }
  else {
    return;
  }

  // Find all traits that match qtl name (cv = 'LegumeInfo:traits')
  $sql = "
    SELECT cv_id, name FROM {cv} 
    WHERE name = 'LegumeInfo:traits'";
  $results = chado_query($sql); // note that trait cv must exist or we wouldn't be here.
  $trait_cv = $results->fetchAll();
  $trait_cv_id = $trait_cv[0]->cv_id;
  $trait_info = ontology_search_setSimilarTerms($term, 
                                                array($trait_cv_id=>'LegumeInfo:traits'));

  // Use OBO terms and ontology heirarchy to find additional trait names.
  if ($trait_info) {
    $matches = getQTLbyOBOterms($term, $trait_info);
    
    if (isset($matches['child_matches'])) {
      // Extract trait names from the child matches (traits found through 
      //  child OBO terms attached to initial list of traits that were found 
      //  via string  similarity)
      $qtl_names = array();
      foreach ($matches['child_matches'] as $m) {
        $qtl_names[] = $m->qtl_name;
      }
    
      // Replace the default qtl_name search with a search for all
      //   found traits.
      for ($i=0; $i<count($query->where[1]['conditions']); $i++) {
        $c = $query->where[1]['conditions'][$i];
        if ($c['field'] == 'qtl_search.qtl_name') {
          $query->where[1]['conditions'][$i]['value'] = '%((' . implode(')|(', $qtl_names) . '))%';
          $query->where[1]['conditions'][$i]['operator'] = 'SIMILAR TO';
        }
      }//each condition
    }//found child matches
  }//found matching traits
}//legume_qtl_views_query_alter


/**
 * Add details and positions for the QTL to $feature record
 * 
 * @param $variables
 */
function legume_qtl_preprocess_tripal_feature_QTL_base(&$variables) {
  // Fill in $feature with QTL details and positions
  $feature = $variables['node']->feature;  
  $feature->qtl_details = getQTLDetails($feature->feature_id);
  $feature->map_positions = getMapPositions($feature->feature_id);
}


/**
 * Add experiment information for the QTL 
 *
 * @param $variables
 */
function legume_qtl_preprocess_tripal_feature_QTL_experiment(&$variables) {
  // Fill in $feature with QTL experiment 
  $feature = $variables['node']->feature;
  $feature->experiments = getQTLExperiments($feature->feature_id);
}


/**
 * getQTLDetails()
 *
 * @param $feature_id
 */
function getQTLDetails($feature_id) {
  $qtl = false;
  
  $sql = "SELECT * FROM chado.qtl_search WHERE qtl_id=$feature_id";
  if ($res = chado_query($sql, array())) {
    $qtl = $res->fetchObject();
  }
  
  // Return the data
  return $qtl;
}//getQTLDetails


/**
 * getQTLExperiment()
 *
 * @param $experiment_id
 */
function getQTLExperiments($qtl_id) {
  $experiments = false;

  $sql = "
    SELECT p.project_id FROM {project} p
      INNER JOIN {feature_project} fp ON fp.project_id=p.project_id
    WHERE fp.feature_id=$qtl_id";
  if ($res = chado_query($sql, array())) {
    $experiments = array();
    $exps = $res->fetchAll();
    foreach ($exps as $exp) {
      $experiment_id = $exp->project_id;
      $sql = "
        SELECT t.name, pp.value FROM {project} p
          INNER JOIN {projectprop} pp ON pp.project_id=p.project_id
          INNER JOIN {cvterm} t ON t.cvterm_id=pp.type_id
        WHERE p.project_id=$experiment_id";
      if ($res = chado_query($sql, array())) {
        $experiment = array();
        $props = $res->fetchAll();
        foreach ($props as $prop) {
          if ($prop->name == 'Project Description') {
            $experiment['project_description'] = $prop->value;
          }
          else if ($prop->name == 'Project Comment') {
            $experiment['project_comment'] = $prop->value;
          }
        }//each property
      }
  
      $sql = "
        SELECT g.description
        FROM {project} p
          INNER JOIN {nd_experiment_project} ep ON ep.project_id=p.project_id
          INNER JOIN {nd_experiment} e ON e.nd_experiment_id=ep.nd_experiment_id
          INNER JOIN {nd_geolocation} g ON g.nd_geolocation_id=e.nd_geolocation_id
        WHERE p.project_id=$experiment_id";
      if ($res = chado_query($sql, array())) {
        $desc = $res->fetchObject();
        $experiment['geolocation'] = $desc->description;
      }

      $experiments[] = $experiment;
    }//each experiment
  }

  return $experiments;
}//getQTLExperiment


/**
 * getMapPositions()
 *
 * @param $feature_id
 */
function getMapPositions($feature_id) {
  $mp = false;
  
  $sql = "SELECT * FROM chado.qtl_map_position WHERE qtl_id=$feature_id";
  if ($res = chado_query($sql, array())) {
    $mp = $res->fetchAll();
  }
  
  // Return the data
  return $mp;
}//getMapPositions


/**
 * getStockLink()
 *
 * @param $stock_name
 */
function getStockLink($stock_name) {
  // Construct stock link
  //   example: /stock/Arachis/hypogaea/Cultivar/89xOL14-11-1-1-1-b2B
   
  $sql = "
    SELECT s.uniquename, o.genus, o.species, t.name AS type FROM {stock} s
      INNER JOIN {organism} o ON o.organism_id=s.organism_id
      INNER JOIN {cvterm} t ON t.cvterm_id=s.type_id
    WHERE
      s.name='$stock_name' OR s.uniquename='$stock_name'";
  if ($stock_res = chado_query($sql, array())) {
    foreach ($stock_res as $stock) {
      $stock_name = str_replace(' ', '-', $stock->uniquename);
      $parts = array('stock', $stock->genus, $stock->species, $stock->type, $stock_name);
      return implode('/', $parts);
    }
  }
  
  return false;
}//getStockLink


/**
  * legume_qtl_dbresult_to_array()
  * Helper function to convert a database resultset into an object array
  */
function legume_qtl_dbresult_to_array($dbresult) {
  if (!$dbresult) {
    return false;
  }
  
  $arr = array();
  while ($obj = $dbresult->fetchObject()) {
    array_push($arr, $obj);
  }
  return $arr;
}//legume_qtl_dbresult_to_array


/**
  * Aggreate the contents of a String array by using the specified separator.
  */
function legume_qtl_stringarray_agg($arr, $separator) {
    $text = "";
    for ($i = 0; $i < count($arr); $i ++) {
        $text .= $arr[$i];
        if ($i != count($arr) - 1) {
            $text .= $separator;
        }
    }
    return $text;
}//legume_qtl_stringarray_agg


/**
  * makeLgMapLink()
  */
function makeLgMapLink($map_position) {
  $lg    = $map_position->lg;
//TODO: add link to lg record page
//    $lg_id = $map_positions->lg_id;
//    $lg    = "<a href=\"/ID$lg_id\">$lg</a>";
  if ($map_position->lis_lg_map_accession) {
    $options = array('return_sql' => true); // for debugging
    $cols = array('urlprefix');
    $vals = array('name' => 'LIS:cmap');
    $res = tripal_core_chado_select('db', $cols, $vals);
    $url = $res[0]->urlprefix . $map_position->lis_lg_map_accession;
// NOTE! This is unique to LIS websites
    $highlight = urlencode('"' . $map_position->map_name 
                           . '_' .  $map_position->lg
                           . '_' . $map_position->qtl_symbol . '"');
    $url .= ";highlight=$highlight";
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    $lg .= " [<a href=\"$url\">CMap</a>]";
  }
  
  return $lg;
}//makeLgMapLink


/**
  * makeMapLink()
  * Given a qtl_map_position record, create the HTML for a map name link.
  */
function makeMapLink($map_position) {
  $map_name = $map_position->map_name;
  $map_name = "<a href=\"/featuremap/$map_name\">$map_name</a>";
  if ($map_position->lis_map_accession) {
    $options = array('return_sql' => true); // for debugging
    $cols = array('urlprefix');
    $vals = array('name' => 'LIS:cmap');
    $res = tripal_core_chado_select('db', $cols, $vals);
    $url = $res[0]->urlprefix . $map_position->lis_map_accession;
// NOTE! This is unique to LIS websites
    $highlight = urlencode('"' . $map_position->map_name 
                           . '_' .  $map_position->lg
                           . '_' . $map_position->qtl_symbol . '"');
    $url .= ";highlight=$highlight";
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    $map_name .= " [<a href=\"$url\">CMap</a>]";
  }
  
  return $map_name;
}//makeMapLink


/**
  * getQTLbyOBOterms()
  * Find child and matching QTL via attached OBO terms and ontology hierarchies.
  */
function getQTLbyOBOterms($term, $traits) {
  // Get obo terms attached to these traits
  $sql = "
    SELECT dbx.cvterm_id, dbx.dbxref_id, dbx.accession 
    FROM cvterm t 
      INNER JOIN cv ON cv.cv_id=t.cv_id 
      LEFT JOIN ( 
        SELECT cd.cvterm_id AS trait_id, n.cvterm_id, dx.dbxref_id, (db.name||':'||dx.accession) AS accession 
        FROM cvterm_dbxref cd 
          INNER JOIN dbxref dx ON dx.dbxref_id=cd.dbxref_id 
          INNER JOIN db ON db.db_id=dx.db_id 
          INNER JOIN cvterm n ON n.dbxref_id=dx.dbxref_id
        ) dbx ON dbx.trait_id=t.cvterm_id 
    WHERE accession IS NOT NULL
          AND t.cvterm_id IN (" . implode(',', array_keys($traits)) . ")";
  $trait_result = chado_query($sql);
  $trait_obo_terms = $trait_result->fetchAll();
  
  // Get child and sibling terms for each
  foreach ($trait_obo_terms as $r) {
    // Put this term in the child list
    $child_obo_terms[$r->cvterm_id] = $r->accession;
    // Get all child terms and add to child list
    if ($children = ontology_search_getChild($r->cvterm_id)) {
      foreach ($children as $child) {
        $child_obo_terms[$child['cvterm_id']] = $child['accession'];
      }//each child
    }

    if ($siblings = ontology_search_getSibilings($r->cvterm_id)) {
      foreach ($siblings as $sib) {
        $sibling_obo_terms[$sib['cvterm_id']] = $sib['accession'];
      }//each sibling
    }
  }//each trait OBO term found

 
  // Get all obo terms that match input term
  
  // Set ontologies to search:
  $search_ontologies = array();
  $sql = "
    SELECT cv_id, name FROM {cv} 
    WHERE name IN ('PO', 'SOY', 'plant_ontology', 
                   'plant_trait_ontology', 'soybean_trait')";
  $results = chado_query($sql);
  foreach ($results as $r) {
    $search_ontologies[$r->cv_id] = $r->name;
  }
  
  // Get similar terms
  $obo_terms = ontology_search_setSimilarTerms($term, $search_ontologies, 1000); //1000??!?!?!?!?!
  if ($obo_terms) {
    // Add child and sib iterms to lists
    // NOTE: there is likely to be duplicate OBO term in the child and sib lists; 
    //       these will be cleaned out later.
    foreach (array_keys($obo_terms) as $cvterm_id) {
      if ($children = ontology_search_getChild($cvterm_id)) {
        foreach ($children as $child) {
          $child_obo_terms[$child['cvterm_id']] = $child['accession'];
        }
      }
 
      if ($siblings = ontology_search_getSibilings($cvterm_id)) {
        foreach ($siblings as $sib) {
          $sibling_obo_terms[$sib['cvterm_id']] = $sib['accession'];
        }//each trait OBO term
      }
    }//each trait OBO term
  }

  // Get all QTL records associated with child OBO terms
  if (count($child_obo_terms) > 0) {
    $sql = "
      SELECT qtl_name
      FROM qtl_search
      WHERE obo_terms SIMILAR TO '%((" . implode(')|(', $child_obo_terms) . "))%'";
    $results = chado_query($sql);
    $child_QTL = $results->fetchAll();
  }

  if (count($sibling_obo_terms) > 0) {
    $sql = "
      SELECT qtl_name
      FROM qtl_search
      WHERE obo_terms SIMILAR TO '%((" . implode(')|(', $sibling_obo_terms) . "))%'";
    $results = chado_query($sql);
    $sib_QTL = $results->fetchAll();
  }

  // Weed out all similar (sibling) QTL that are in child matches
  $child_QTL_names = array();
  foreach ($child_QTL as $q) {
    $child_QTL_names[$q->qtl_name] = 1;
  }//each child QTL
  $other_QTL = array();
  $other_traits = array();
  foreach ($sib_QTL as $q) {
    if (!($child_QTL_names[$q->qtl_name])) {
      $other_QTL[] = $q;
      
      // extract trait part of QTL name
      preg_match("/(.*?)\s\d/", $q->qtl_name, $m);
      $other_traits[$m[1]] = $m[1];
    }
  }//each sibling QTL

  // Save list of other (sibling) traits briefly in the session object for later use.
  $_SESSION['related_searches'] = serialize($other_traits);

  return array('child_matches' => $child_QTL, 'sibling_matches' => $other_QTL);
}//getQTLbyOBOterms
