<?php
/**
 * @file
 * This file contains all Drupal hooks for the module other than any
 * node hooks and block hooks. Those go in the [module name].chado_node.inc file
 * and [module_name].blocks.inc respectively
 *
 * @ingroup legume_qtl
 */

require_once('includes/legume_qtl.chado_node.inc');

/**
 * Implementation of hook_permissions()
 * 
 * Set the permission types that this module uses. Essentially we
 * want permissions that protect creation, editing and deleting of
 * chado data objects
 * @ingroup legume_qtl
 *
 */
function legume_qtl_permissions() {
   return array(
    'access legume_qtl content' => array(
      'title' => t('View QTLs'),
      'description' => t('Allow users to view qtl pages.'),
    ),
      'administer legume_qtl' => array(
      'title' => t('Administer QTLs'),
      'description' => t('Allow module administration.'),
    )
  );
}


/**
 * Implements hook_menu().
 * Menu items are automatically added for the new node types created
 * by this module to the 'Create Content' Navigation menu item.  This function
 * adds more menu items needed for this module.
 *
 * @ingroup legume_qtl
 */
function legume_qtl_menu() {
  $items = array();

  // administration landing page. currently has no content but is
  // apparently required for the Sync and Help links to work.
  $items['admin/tripal/extension/legume_qtl'] = array(
    'title' => 'QTLs',
    'description' => 'qtls administration',
    'page callback' => 'legume_qtl_admin_listing',
    'access arguments' => array('administer legume_qtl'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  // help menu 
  $items['admin/tripal/extension/legume_qtl/help'] = array(
    'title' => 'Help',
    'description' => 'Basic description of legume_qtl module functionality',
    'page callback' => 'theme',
    'page arguments' => array('legume_qtl_help'),
    'access arguments' => array('administer legume_qtl'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10
  );

  // configuration menu item
  $items['admin/tripal/extension/legume_qtl/configuration'] = array(
    'title' => 'Settings',
    'description' => 'Configure the legume_qtl module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('legume_qtl_admin'),
    'access arguments' => array('administer legume_qtl'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );

  return $items;
}

/**
 * Implements hook_views_api()
 * Purpose: Essentially this hook tells drupal that there is views support for
 *  for this module which then includes tripal_db.views.inc where all the
 *  views integration code is
 *
 * @ingroup legume_qtl
 */
function legume_qtl_views_api() {
  return array(
    'api' => 3.0,
  );
}


/**
 *  Implements hook_theme().
 *
 * We need to let drupal know about our theme functions and their arguments.
 * We create theme functions to allow users of the module to customize the
 * look and feel of the output generated in this module
 *
 * @ingroup legume_qtl
 */
function legume_qtl_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'legume_qtl');

  $themes = array(        
    'tripal_feature_QTL_base' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_QTL_base',
      'path' => "$path/theme/templates"
    ),
    'tripal_feature_QTL_details' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_QTL_details',
      'path' => "$path/theme/templates"
    ),
    'tripal_feature_Map_Pos' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_Map_Pos',
      'path' => "$path/theme/templates"
    ),
    'tripal_feature_QTL_measurements' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_QTL_measurements',
      'path' => "$path/theme/templates"
    ),
    'tripal_feature_QTL_trait' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_QTL_trait',
      'path' => "$path/theme/templates"
    ),
  );

  return $themes;
}


/**
  * hook_form_alter
  *
  * Add a validator to the search form
  */
function legume_qtl_form_alter(&$form, &$form_state, $form_id) {
//drupal_set_message("Form ID is: $form_id");
  if ($form_id == 'views_exposed_form') {
    $form['#validate'][] = 'legume_qtl_form_validate';
//drupal_set_message("Validation is set to " . var_export($form['#validate'], true));
  }
} 


/**
  * Form validator for search form. 
  * Use this to trim whitespace from text fields.
  */
function legume_qtl_form_validate($form, &$form_state) {
//drupal_set_message("Form values are " . var_export($form_state['values'], true));
  $form_state['values']['expt_trait_name'] = trim($form_state['values']['expt_trait_name']);
  $form_state['values']['expt_pub_symbol'] = trim($form_state['values']['expt_pub_symbol']);
  $form_state['values']['qtl_symbol']      = trim($form_state['values']['qtl_symbol']);
}


/**
 * Provide more details about the QTL
 * 
 * @param $variables
 */
function legume_qtl_preprocess_tripal_feature_QTL_base(&$variables) {
  $feature = $variables['node']->feature;  
  $feature->qtl_details = getQTLDetails($feature->feature_id);
  $feature->map_positions = getMapPositions($feature->feature_id);
}


/**
 * 
 * @param $feature_id
 */
function getQTLDetails($feature_id) {
  $qtl = false;
  
  $sql = "SELECT * FROM chado.qtl_search WHERE qtl_id=$feature_id";
  if ($res = chado_query($sql, array())) {
    $qtl = $res->fetchObject();
  }
  
  // Return the data
  return $qtl;
}

/**
 *
 * @param $feature_id
 */
function getMapPositions($feature_id) {
  $mp = false;
  
  $sql = "SELECT * FROM chado.qtl_map_position WHERE qtl_id=$feature_id";
  if ($res = chado_query($sql, array())) {
    $mp = $res->fetchAll();
  }
  
  // Return the data
  return $mp;
}


// This is a function to convert a database resultset into an object array
function legume_qtl_dbresult_to_array($dbresult) {
  if (!$dbresult) {
    return false;
  }
  
  $arr = array();
  while ($obj = $dbresult->fetchObject()) {
    array_push($arr, $obj);
  }
  return $arr;
}


// The function will aggreate the content of a String array by using the 
//  specified separator
function legume_qtl_stringarray_agg($arr, $separator) {
    $text = "";
    for ($i = 0; $i < count($arr); $i ++) {
        $text .= $arr[$i];
        if ($i != count($arr) - 1) {
            $text .= $separator;
        }
    }
    return $text;
}


function makeLgMapLink($map_position) {
  $lg    = $map_position->lg;
//TODO: add link to lg record page
//    $lg_id = $map_positions->lg_id;
//    $lg    = "<a href=\"/ID$lg_id\">$lg</a>";
  if ($map_position->lis_lg_map_accession) {
    $options = array('return_sql' => true); // for debugging
    $cols = array('urlprefix');
    $vals = array('name' => 'LIS:cmap');
    $res = tripal_core_chado_select('db', $cols, $vals);
    $url = $res[0]->urlprefix . $map_position->lis_lg_map_accession;
// NOTE! This is unique to LIS websites
    $highlight = urlencode('"' . $map_position->map_name 
                           . '_' .  $map_position->lg
                           . '_' . $map_position->qtl_symbol . '"');
    $url .= ";highlight=$highlight";
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    $lg .= " [<a href=\"$url\">CMap</a>]";
  }
  
  return $lg;
}


// Given a qtl_map_position record, create the HTML for a map name link.
function makeMapLink($map_position) {
//echo "<pre>";var_dump($map_position);echo "</pre>";
  $map_name = $map_position->map_name;
  $map_name = "<a href=\"/featuremap/$map_name\">$map_name</a>";
  if ($map_position->lis_map_accession) {
    $options = array('return_sql' => true); // for debugging
    $cols = array('urlprefix');
    $vals = array('name' => 'LIS:cmap');
    $res = tripal_core_chado_select('db', $cols, $vals);
    $url = $res[0]->urlprefix . $map_position->lis_map_accession;
// NOTE! This is unique to LIS websites
    $highlight = urlencode('"' . $map_position->map_name 
                           . '_' .  $map_position->lg
                           . '_' . $map_position->qtl_symbol . '"');
    $url .= ";highlight=$highlight";
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    $map_name .= " [<a href=\"$url\">CMap</a>]";
  }
  
  return $map_name;
}
