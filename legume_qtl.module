<?php
/**
 * @file
 * This file contains all Drupal hooks for the module other than any
 * node hooks and block hooks. Those go in the [module name].chado_node.inc file
 * and [module_name].blocks.inc respectively
 *
 * @ingroup legume_qtl
 */

require_once('includes/legume_qtl.chado_node.inc');

/**
 * Implementation of hook_permissions()
 * 
 * Set the permission types that this module uses. Essentially we
 * want permissions that protect creation, editing and deleting of
 * chado data objects
 * @ingroup legume_qtl
 *
 */
function legume_qtl_permissions() {
   return array(
    'access legume_qtl content' => array(
      'title' => t('View QTLs'),
      'description' => t('Allow users to view qtl pages.'),
    ),
      'administer legume_qtl' => array(
      'title' => t('Administer QTLs'),
      'description' => t('Allow module administration.'),
    )
  );
}


/**
 * Implements hook_menu().
 * Menu items are automatically added for the new node types created
 * by this module to the 'Create Content' Navigation menu item.  This function
 * adds more menu items needed for this module.
 *
 * @ingroup legume_qtl
 */
function legume_qtl_menu() {
  $items = array();

  // administration landing page. currently has no content but is
  // apparently required for the Sync and Help links to work.
  $items['admin/tripal/extension/legume_qtl'] = array(
    'title' => 'QTLs',
    'description' => 'qtls administration',
    'page callback' => 'legume_qtl_admin_listing',
    'access arguments' => array('administer legume_qtl'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  // help menu 
  $items['admin/tripal/extension/legume_qtl/help'] = array(
    'title' => 'Help',
    'description' => 'Basic description of legume_qtl module functionality',
    'page callback' => 'theme',
    'page arguments' => array('legume_qtl_help'),
    'access arguments' => array('administer legume_qtl'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10
  );

  // configuration menu item
  $items['admin/tripal/extension/legume_qtl/configuration'] = array(
    'title' => 'Settings',
    'description' => 'Configure the legume_qtl module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('legume_qtl_admin'),
    'access arguments' => array('administer legume_qtl'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );

  return $items;
}

/**
 * Implements hook_views_api()
 * Purpose: Essentially this hook tells drupal that there is views support for
 *  for this module which then includes tripal_db.views.inc where all the
 *  views integration code is
 *
 * @ingroup legume_qtl
 */
function legume_qtl_views_api() {
  return array(
    'api' => 3.0,
  );
}


/**
 *  Implements hook_theme().
 *
 * We need to let drupal know about our theme functions and their arguments.
 * We create theme functions to allow users of the module to customize the
 * look and feel of the output generated in this module
 *
 * @ingroup legume_qtl
 */
function legume_qtl_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'legume_qtl');

  $themes = array(        
    'tripal_feature_base' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_QTL_base',
      'path' => "$path/theme/templates"
    ),
    'tripal_feature_QTL_base' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_QTL_base',
      'path' => "$path/theme/templates"
    ),
    'tripal_feature_QTL_details' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_QTL_details',
      'path' => "$path/theme/templates"
    ),
    'tripal_feature_Map_Pos' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_Map_Pos',
      'path' => "$path/theme/templates"
    ),
    'tripal_feature_QTL_measurements' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_QTL_measurements',
      'path' => "$path/theme/templates"
    ),
    'tripal_feature_QTL_trait' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_QTL_trait',
      'path' => "$path/theme/templates"
    ),
  );

//var_dump($themes);
  return $themes;
}


/**
 * Provide more details about the QTL
 * 
 * @param $variables
 */
function legume_qtl_preprocess_tripal_feature_QTL_base(&$variables) {
  $feature = $variables['node']->feature;  
  $feature->qtl_details = getQTLDetails($feature->feature_id);
  $feature->map_positions = getMapPositions($feature->feature_id);
}


/**
 * Provide more details about the QTL
 * 
 * @param $variables
 */
/*no used
function legume_qtl_preprocess_tripal_feature_QTL_publications(&$variables) {
  $feature = $variables['node']->feature;  
  $qtl_pubs = get_QTL_pubs($feature->feature_id);
//TODO: fix this
//  $feature->legume_qtl->publications = $qtl_pubs;
}


/**
 * Provide more details about the QTL
 * 
 * @param $variables
 */
/*not used
function legume_qtl_preprocess_tripal_feature_QTL_map_positions(&$variables) {
  $feature = $variables['node']->feature;
  $qtl_map_pos = get_QTL_map_positions($feature->feature_id);
//TODO: fix this
//  $feature->legume_qtl->map_positions = $qtl_map_pos;
}
*/


/**
 *
 */
//TODO: fix or change (can't this come from qtl_search?)
/* probably won't be used
function get_QTL_map_positions ($feature_id) {
  // Get map positions.
  $sql = "
     SELECT
       CF.nid AS nid,
       FM.name AS name,
       X.accession,
       DB.urlprefix,
       LG.name AS linkage_group,
       BIN.name AS bin,
       LGP.value AS chr,
       START.value AS QTL_start,
       STOP.value AS QTL_stop,
       PEAK.value AS QTL_peak,
       QTL.uniquename AS QTL_name
    FROM {feature} QTL
    INNER JOIN {featurepos} FP ON QTL.feature_id = FP.feature_id
    INNER JOIN {featuremap} FM ON FP.featuremap_id = FM.featuremap_id
    LEFT JOIN {featuremap_dbxref} FD ON FP.featuremap_id = FD.featuremap_id
    LEFT JOIN {dbxref} X ON FD.dbxref_id = X.dbxref_id
    LEFT JOIN {db} ON db.db_id = X.db_id
    INNER JOIN {feature} LG ON FP.map_feature_id = LG.feature_id
    LEFT JOIN (
      SELECT FP.feature_id, FP.value 
      FROM {featureprop} FP 
      WHERE FP.type_id = 
        (SELECT cvterm_id 
         FROM {cvterm} 
         WHERE name = 'chr_number' AND cv_id = (SELECT cv_id FROM {cv} WHERE name = 'MAIN'))
    ) LGP ON LG.feature_id = LGP.feature_id
    LEFT JOIN (
      SELECT featurepos_id, value 
      FROM {featureposprop} FPP
      WHERE FPP.type_id = 
        (SELECT cvterm_id 
         FROM {cvterm} 
         WHERE name = 'start' AND cv_id = (SELECT cv_id FROM {cv} WHERE name = 'MAIN'))
    ) START ON FP.featurepos_id = START.featurepos_id
    LEFT JOIN (
      SELECT featurepos_id, value 
      FROM {featureposprop} FPP
      WHERE FPP.type_id = 
        (SELECT cvterm_id 
         FROM {cvterm} 
         WHERE name = 'stop' AND cv_id = (SELECT cv_id FROM {cv} WHERE name = 'MAIN'))
    ) STOP ON FP.featurepos_id = STOP.featurepos_id
    LEFT JOIN (
      SELECT featurepos_id, value 
      FROM {featureposprop} FPP
      WHERE FPP.type_id = 
        (SELECT cvterm_id 
         FROM {cvterm} 
         WHERE name = 'qtl_peak' AND cv_id = (SELECT cv_id FROM {cv} WHERE name = 'MAIN'))
    ) PEAK ON FP.featurepos_id = PEAK.featurepos_id
    LEFT JOIN
      (SELECT F2.name, FR2.subject_id 
       FROM {feature} F2
         INNER JOIN {feature_relationship} FR2 ON FR2.object_id = F2.feature_id
       WHERE FR2.type_id =
         (SELECT cvterm_id FROM {cvterm} WHERE name = 'located_in')
      ) BIN ON QTL.feature_id = BIN.subject_id
    LEFT JOIN public.chado_featuremap CF ON FM.featuremap_id = CF.featuremap_id
    WHERE 
      QTL.type_id = (SELECT type_id FROM {feature} WHERE feature_id = %d) AND
      QTL.feature_id = %d
  ";

  return legume_qtl_dbresult_to_array(chado_query($sql, $feature_id, $feature_id));
}
*/


/**
 *
 */
//TODO: change or fix
/* probably won't be used
function get_QTL_pubs ($feature_id) {
  
  // Get publications via the ND tables. (NOTE: it is possible to
  // link to the pubs via the feature_pub table but this is not done in all cases)
  $sql = "
    SELECT
      P.pub_id,
      max(P.uniquename) as uniquename,
      max(P.pyear) as pyear,
      max(P.title) as title,
      max(CP.nid) as nid
    FROM {feature} QTL
      INNER JOIN {feature_project} FP ON FP.feature_id = QTL.feature_id
      INNER JOIN {nd_experiment_project} NEJ ON NEJ.project_id = FP.project_id
      INNER JOIN {nd_experiment_pub} NEP ON NEP.nd_experiment_id = NEJ.nd_experiment_id
      INNER JOIN {pub} P ON P.pub_id = NEP.pub_id
      LEFT JOIN public.chado_pub CP ON CP.pub_id = P.pub_id
    WHERE QTL.feature_id = %d
    GROUP BY P.pub_id;
  ";
  return legume_qtl_dbresult_to_array(chado_query($sql, $feature_id)); 
}
*/

/**
 * 
 * @param $feature_id
 */
function getQTLDetails($feature_id) {
  $qtl = false;
  
  $sql = "SELECT * FROM chado.qtl_search WHERE qtl_id=$feature_id";
  if ($res = chado_query($sql, array())) {
    $qtl = $res->fetchObject();
  }
  
  // Return the data
  return $qtl;
}

/**
 *
 * @param $feature_id
 */
function getMapPositions($feature_id) {
  $mp = false;
  
  $sql = "SELECT * FROM chado.qtl_map_position WHERE qtl_id=$feature_id";
  if ($res = chado_query($sql, array())) {
    $mp = $res->fetchAll();
  }
  
  // Return the data
  return $mp;
}


// This is a function to convert a database resultset into an object array
function legume_qtl_dbresult_to_array($dbresult) {
  if (!$dbresult) {
    return false;
  }
  
  $arr = array();
  while ($obj = $dbresult->fetchObject()) {
    array_push($arr, $obj);
  }
  return $arr;
}


// The function will aggreate the content of a String array by using the 
//  specified separator
function legume_qtl_stringarray_agg($arr, $separator) {
    $text = "";
    for ($i = 0; $i < count($arr); $i ++) {
        $text .= $arr[$i];
        if ($i != count($arr) - 1) {
            $text .= $separator;
        }
    }
    return $text;
}
