<?php

/**
 * @defgroup legume_qtl 
 * @{
 * Provides functions for display and management of data in custom tables
 * @}
 * @ingroup tripal_modules
 */


/**
 *
 * @ingroup tripal_feature
 */
function legume_qtl_init() {
}

/**
 * Set the permission types that the chado module uses.  Essentially we
 * want permissions that protect creation, editing and deleting of chado
 * data objects
 *
 * @ingroup legume_qtl
 */
function legume_qtl_perm() {
  return array(

  );
}
/**
 * Menu items are automatically added for the new node types created
 * by this module to the 'Create Content' Navigation menu item.  This function
 * adds more menu items needed for this module.
 *
 * @ingroup legume_qtl
 */
function legume_qtl_menu() {
  $items = array();

  return $items;
}

/**
 * Implements hook_views_api()
 * Purpose: Essentially this hook tells drupal that there is views support for
 *  for this module which then includes tripal_db.views.inc where all the
 *  views integration code is
 *
 * @ingroup legume_qtl
 */
function legume_qtl_views_api() {
  return array(
    'api' => 2.0,
  );
}


/**
 * Administrative settings form
 *
 * @ingroup legume_qtl
 */
function legume_qtl_admin() {
  $form = array();

  return system_settings_form($form);
}

/**
 *
 * @ingroup legume_qtl
 */
function legume_qtl_admin_validate($form, &$form_state) {
 
}

/**
 * Implementation of hook_nodeapi().
 *
 * @ingroup legume_qtl
 */
//TODO: reasearch this function
function legume_qtl_nodeapi(&$node, $op, $teaser, $page) {

  switch ($op) {
    case 'view':

      if ($teaser) {
        return '';
      }
            
      if (strcmp($node->type, 'chado_feature')==0) {        
        if(strcmp($node->feature->type_id->name, "QTL") == 0) {
/*TODO: fix or change these
          $node->content['tripal_feature_QTL_map_positions'] = array(
            '#value' => theme('tripal_feature_QTL_map_positions',  $node),
          );
          $node->content['tripal_feature_QTL_publications'] = array(
            '#value' => theme('tripal_feature_QTL_publications',  $node),
          );
*/
          // we want to override the base theme
          // TODO: uncomment the follwoing lines when Tripal v2.0 is released
//          $node->content['tripal_feature_base'] = array(
//            '#value' => theme('tripal_feature_QTL_base',  $node),
//          );
        }
      }
      break;      
  } 
}

/**
 * We need to let drupal know about our theme functions and their arguments.
 * We create theme functions to allow users of the module to customize the
 * look and feel of the output generated in this module
 *
 * @ingroup legume_qtl
 */
function legume_qtl_theme() {
//  $path = drupal_get_path('module', 'legume_qtl') . '/theme';  
  $themes = array(        
    'tripal_feature_QTL_base' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_QTL_base',
      'path' => '', //$path . '/tripal_feature',
    ),
/*TODO: fix or change these
    'tripal_feature_QTL_map_positions' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_QTL_map_positions',
      'path' => $path . '/tripal_feature',
    ),
    'tripal_feature_QTL_publications' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_feature_QTL_publications',
      'path' => $path . '/tripal_feature',
    ),
*/
  );
  return $themes;
}

/**
 * Provide more details about the QTL
 * 
 * @param $variables
 */
function legume_qtl_preprocess_tripal_feature_QTL_base(&$variables) {
  $feature = $variables['node']->feature;  
  $qtl_details = getQTLDetails($feature->feature_id);
  $feature->legume_qtl->qtl_details =  $qtl_details;
}

/**
 * Provide more details about the QTL
 * 
 * @param $variables
 */
function legume_qtl_preprocess_tripal_feature_QTL_publications(&$variables) {
  $feature = $variables['node']->feature;  
  $qtl_pubs = get_QTL_pubs($feature->feature_id);
//TODO: fix this
//  $feature->legume_qtl->publications = $qtl_pubs;
}

/**
 * Provide more details about the QTL
 * 
 * @param $variables
 */
function legume_qtl_preprocess_tripal_feature_QTL_map_positions(&$variables) {
  $feature = $variables['node']->feature;
  $qtl_map_pos = get_QTL_map_positions($feature->feature_id);
//TODO: fix this
//  $feature->legume_qtl->map_positions = $qtl_map_pos;
}

/**
 *
 * @ingroup legume_qtl
 */
//TODO: reasearch this function
function legume_qtl_cron() {

}

/**
 *
 */
//TODO: fix or change
function get_QTL_map_positions ($feature_id) {
  // Get map positions.
  $sql = "
     SELECT
       CF.nid AS nid,
       FM.name AS name,
       X.accession,
       DB.urlprefix,
       LG.name AS linkage_group,
       BIN.name AS bin,
       LGP.value AS chr,
       START.value AS QTL_start,
       STOP.value AS QTL_stop,
       PEAK.value AS QTL_peak,
       QTL.uniquename AS QTL_name
    FROM {feature} QTL
    INNER JOIN {featurepos} FP ON QTL.feature_id = FP.feature_id
    INNER JOIN {featuremap} FM ON FP.featuremap_id = FM.featuremap_id
    LEFT JOIN {featuremap_dbxref} FD ON FP.featuremap_id = FD.featuremap_id
    LEFT JOIN {dbxref} X ON FD.dbxref_id = X.dbxref_id
    LEFT JOIN {db} ON db.db_id = X.db_id
    INNER JOIN {feature} LG ON FP.map_feature_id = LG.feature_id
    LEFT JOIN (
      SELECT FP.feature_id, FP.value 
      FROM {featureprop} FP 
      WHERE FP.type_id = 
        (SELECT cvterm_id 
         FROM {cvterm} 
         WHERE name = 'chr_number' AND cv_id = (SELECT cv_id FROM {cv} WHERE name = 'MAIN'))
    ) LGP ON LG.feature_id = LGP.feature_id
    LEFT JOIN (
      SELECT featurepos_id, value 
      FROM {featureposprop} FPP
      WHERE FPP.type_id = 
        (SELECT cvterm_id 
         FROM {cvterm} 
         WHERE name = 'start' AND cv_id = (SELECT cv_id FROM {cv} WHERE name = 'MAIN'))
    ) START ON FP.featurepos_id = START.featurepos_id
    LEFT JOIN (
      SELECT featurepos_id, value 
      FROM {featureposprop} FPP
      WHERE FPP.type_id = 
        (SELECT cvterm_id 
         FROM {cvterm} 
         WHERE name = 'stop' AND cv_id = (SELECT cv_id FROM {cv} WHERE name = 'MAIN'))
    ) STOP ON FP.featurepos_id = STOP.featurepos_id
    LEFT JOIN (
      SELECT featurepos_id, value 
      FROM {featureposprop} FPP
      WHERE FPP.type_id = 
        (SELECT cvterm_id 
         FROM {cvterm} 
         WHERE name = 'qtl_peak' AND cv_id = (SELECT cv_id FROM {cv} WHERE name = 'MAIN'))
    ) PEAK ON FP.featurepos_id = PEAK.featurepos_id
    LEFT JOIN
      (SELECT F2.name, FR2.subject_id 
       FROM {feature} F2
         INNER JOIN {feature_relationship} FR2 ON FR2.object_id = F2.feature_id
       WHERE FR2.type_id =
         (SELECT cvterm_id FROM {cvterm} WHERE name = 'located_in')
      ) BIN ON QTL.feature_id = BIN.subject_id
    LEFT JOIN public.chado_featuremap CF ON FM.featuremap_id = CF.featuremap_id
    WHERE 
      QTL.type_id = (SELECT type_id FROM {feature} WHERE feature_id = %d) AND
      QTL.feature_id = %d
  ";

  return legume_qtl_dbresult_to_array(chado_query($sql, $feature_id, $feature_id));
}

/**
 *
 */
//TODO: change or fix
function get_QTL_pubs ($feature_id) {
  
  // Get publications via the ND tables. (NOTE: it is possible to
  // link to the pubs via the feature_pub table but this is not done in all cases)
  $sql = "
    SELECT
      P.pub_id,
      max(P.uniquename) as uniquename,
      max(P.pyear) as pyear,
      max(P.title) as title,
      max(CP.nid) as nid
    FROM {feature} QTL
      INNER JOIN {feature_project} FP ON FP.feature_id = QTL.feature_id
      INNER JOIN {nd_experiment_project} NEJ ON NEJ.project_id = FP.project_id
      INNER JOIN {nd_experiment_pub} NEP ON NEP.nd_experiment_id = NEJ.nd_experiment_id
      INNER JOIN {pub} P ON P.pub_id = NEP.pub_id
      LEFT JOIN public.chado_pub CP ON CP.pub_id = P.pub_id
    WHERE QTL.feature_id = %d
    GROUP BY P.pub_id
  ";
  return legume_qtl_dbresult_to_array(chado_query($sql, $feature_id)); 
}

/**
 * 
 * @param $feature_id
 */
function getQTLDetails ($feature_id) {
   $qtl = new stdClass();
   
   // Get map, position, population
   $sql = "
     SELECT FPS.feature_id, FPS.map_feature_id, MAP.name AS map_name,
            FPS.mappos AS start, FPE.mappos AS end, 
            LISLGACC.accession AS lis_lg_map_accession,
            LISACC.accession AS lis_map_accession,
            MP.name AS mapping_population,
            P1.parent_name AS parent1, P1.parent_id AS parent1_id,
            P2.parent_name AS parent2, P2.parent_id AS parent2_id
     FROM feature MAPINFO
       INNER JOIN featurepos FPS ON MAPINFO.feature_id=FPS.map_feature_id
       LEFT JOIN featureposprop FPSP ON FPSP.featurepos_id=FPS.featurepos_id
        
       LEFT JOIN featurepos FPE ON MAPINFO.feature_id=FPE.map_feature_id
       LEFT JOIN featureposprop FPEP ON FPEP.featurepos_id=FPE.featurepos_id
    
       LEFT JOIN featuremap MAP ON MAP.featuremap_id=FPS.featuremap_id
       
       LEFT JOIN featuremap_stock FS ON FS.featuremap_id=MAP.featuremap_id
       LEFT JOIN stock MP ON MP.stock_id = FS.stock_id
       LEFT JOIN 
         (SELECT PR.object_id, PR.subject_id, NID.nid AS parent_id, P.name AS parent_name 
          FROM stock_relationship PR 
            INNER JOIN stock P ON P.stock_id = PR.subject_id
            INNER JOIN public.chado_stock NID ON NID.stock_id=p.stock_id
          WHERE PR.type_id = (SELECT cvterm_id FROM cvterm 
                              WHERE name='parent1' 
                                    AND cv_id = (SELECT cv_id FROM cv
                                                 WHERE name='local'))
         ) P1 ON P1.object_id = MP.stock_id
       LEFT JOIN 
         (SELECT PR.object_id, PR.subject_id, NID.nid AS parent_id, P.name AS parent_name 
          FROM stock_relationship PR 
            INNER JOIN stock P ON P.stock_id = PR.subject_id
            INNER JOIN public.chado_stock NID ON NID.stock_id=p.stock_id
          WHERE PR.type_id = (SELECT cvterm_id FROM cvterm 
                              WHERE name='parent2' 
                                    AND cv_id = (SELECT cv_id FROM cv 
                                                 WHERE name='local'))
         ) P2 ON P2.object_id = MP.stock_id
                    
       LEFT JOIN
         (SELECT LISLGACC.accession, LISLGFDBX.feature_id 
          FROM dbxref LISLGACC
            INNER JOIN feature_dbxref LISLGFDBX ON LISLGFDBX.dbxref_id=LISLGACC.dbxref_id
          WHERE LISLGACC.db_id=(SELECT db_id FROM db WHERE name='LIS:cmap')
         ) LISLGACC ON LISLGACC.feature_id=MAPINFO.feature_id
      
       LEFT JOIN
         (SELECT LISACC.accession, LISFDBX.featuremap_id 
          FROM dbxref LISACC
            INNER JOIN featuremap_dbxref LISFDBX ON LISFDBX.dbxref_id=LISACC.dbxref_id
          WHERE LISACC.db_id=(SELECT db_id FROM db WHERE name='LIS:cmap')
         ) LISACC ON LISACC.featuremap_id=MAP.featuremap_id

     WHERE MAPINFO.type_id=(SELECT cvterm_id FROM chado.cvterm 
                            WHERE name = 'linkage_group'
                                  AND cv_id=(SELECT cv_id FROM chado.cv WHERE name='sequence'))
           AND FPSP.type_id=(SELECT cvterm_id FROM cvterm 
                             WHERE name='start coordinate' 
                                   AND cv_id=(SELECT cv_id FROM cv WHERE name='local'))
           AND FPEP.type_id=(SELECT cvterm_id FROM cvterm 
                                WHERE name='stop coordinate' 
                                      AND cv_id=(SELECT cv_id FROM cv WHERE name='local'))
           AND FPS.feature_id = %d";
    $qtl->map_pos = db_fetch_object(chado_query($sql, $feature_id)); 
//echo "In module: <pre>";var_dump($qtl->map_pos);echo "</pre>";

  // Get aliases
  $sql = "
    SELECT S.name, T.name AS type, CV.name AS cv
    FROM {synonym} S
      INNER JOIN {feature_synonym} FS ON S.synonym_id = FS.synonym_id
      INNER JOIN {cvterm} T ON T.cvterm_id=S.type_id
      INNER JOIN {cv} CV ON CV.cv_id=T.cv_id
    WHERE FS.feature_id = %d";
  $qtl->synonyms = legume_qtl_dbresult_to_array(chado_query($sql, $feature_id));

  // Get trait class
  $sql = "
    SELECT TC.name 
    FROM feature_cvterm SYMF
      LEFT JOIN cvterm SYM ON SYM.cvterm_id=SYMF.cvterm_id
      LEFT JOIN feature_cvtermprop SYMP ON SYMP.feature_cvterm_id=SYMF.feature_cvterm_id 
        AND SYMP.type_id=(SELECT cvterm_id FROM cvterm 
                          WHERE name='QTL symbol' 
                                AND cv_id=(SELECT cv_id FROM cv WHERE name='local'))
      LEFT JOIN cvterm_relationship TR ON TR.subject_id=SYM.cvterm_id
                AND TR.type_id=(SELECT cvterm_id FROM cvterm 
                                   WHERE name='has trait class' 
                                         AND cv_id=(SELECT cv_id FROM cv WHERE name='local'))
      LEFT JOIN cvterm TC ON TC.cvterm_id=TR.object_id
    WHERE SYMF.feature_id = %d";
  $qtl->trait_class = legume_qtl_dbresult_to_array(chado_query($sql, $feature_id));
//echo "In module: <pre>";var_dump($qtl->trait_class);echo "</pre>";

  // Get nearest marker
  $sql = "
    SELECT NM.feature_id, NM.name FROM feature_relationship NMR
      INNER JOIN feature NM ON NM.feature_id = NMR.object_id
    WHERE NMR.type_id=(SELECT cvterm_id FROM chado.cvterm 
                       WHERE name='nearest marker' 
                         AND cv_id=(SELECT cv_id FROM chado.cv WHERE name='local'))
          AND NMR.subject_id = %d"; 
  $qtl->nearest_marker = legume_qtl_dbresult_to_array(chado_query($sql, $feature_id));

  // Get flanking marker low
  $sql = "
    SELECT FML.feature_id, FML.name FROM feature_relationship FMLR
      INNER JOIN feature FML ON FML.feature_id = FMLR.object_id
    WHERE FMLR.type_id=(SELECT cvterm_id FROM chado.cvterm 
                   WHERE name='flanking marker low' 
                         AND cv_id=(SELECT cv_id FROM chado.cv WHERE name='local'))
          AND FMLR.subject_id = %d"; 
  $qtl->flanking_marker_low = legume_qtl_dbresult_to_array(chado_query($sql, $feature_id));

  // Get flanking marker high
  $sql = "
    SELECT FMH.feature_id, FMH.name FROM feature_relationship FMHR
      INNER JOIN feature FMH ON FMH.feature_id = FMHR.object_id
    WHERE FMHR.type_id=(SELECT cvterm_id FROM chado.cvterm 
                   WHERE name='flanking marker low' 
                         AND cv_id=(SELECT cv_id FROM chado.cv WHERE name='local'))
          AND FMHR.subject_id = %d"; 
  $qtl->flanking_marker_high = legume_qtl_dbresult_to_array(chado_query($sql, $feature_id));

  // Get publication & experiment information
  $sql = "
    SELECT P.pub_id, P.uniquename AS citation FROM feature_project FP
      INNER JOIN project E ON E.project_id=FP.project_id
      INNER JOIN project_pub PP ON PP.project_id=E.project_id
      LEFT JOIN pub P ON P.pub_id=PP.pub_id
    WHERE FP.feature_id = %d";
  $qtl->pub_expt = legume_qtl_dbresult_to_array(chado_query($sql, $feature_id));

  // Get measurements
  $sql = "
    SELECT AF.feature_id, AF.rawscore, A.name 
    FROM analysis A 
      INNER JOIN analysisfeature AF ON AF.analysis_id=A.analysis_id
    WHERE AF.feature_id = %d";
  $qtl->analysis = legume_qtl_dbresult_to_array(chado_query($sql, $feature_id));
//echo "In module:\n$sql\n with $feature_id, produced analysis values:<pre>";var_dump($qtl->analysis);echo "</pre>";
  
  // Return the data
  return $qtl;
}

// This is a function to convert a database resultset into an object array
function legume_qtl_dbresult_to_array($dbresult) {
  $arr = array();
  while ($obj = db_fetch_object($dbresult)) {
    array_push($arr, $obj);
  }
  return $arr;
}

// The function will aggreate the content of a String array by using the specified separator
function legume_qtl_stringarray_agg($arr, $separator) {
    $text = "";
    for ($i = 0; $i < count($arr); $i ++) {
        $text .= $arr[$i];
        if ($i != count($arr) - 1) {
            $text .= $separator;
        }
    }
    return $text;
}
